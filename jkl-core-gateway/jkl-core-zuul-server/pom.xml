<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>jkl-core-gateway</artifactId>
        <groupId>com.jkinvest.jkl.core</groupId>
        <version>c.2.4-SNAPSHOT</version>
        <relativePath>../</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>jkl-core-zuul-server</artifactId>
    <name>${project.artifactId}</name>
    <description>网关服务启动模块</description>
    
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <!-- 监听端口 -->
        <server.port>7000</server.port>
        <!-- 镜像名称-->
        <docker.repostory>registry.cn-shanghai.aliyuncs.com</docker.repostory>
        <docker.registry.name>liuyq</docker.registry.name>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.jkinvest.jkl.core</groupId>
            <artifactId>jkl-core-common</artifactId>
            <version>${zuihou-project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.jkinvest.jkl.base</groupId>
            <artifactId>jkl-base-boot</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-jdbc</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>com.jkinvest.jkl.base</groupId>
            <artifactId>jkl-base-log-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.jkinvest.jkl.base</groupId>
            <artifactId>jkl-base-jwt-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.jkinvest.jkl.base</groupId>
            <artifactId>jkl-base-zipkin-client-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>com.jkinvest.jkl.base</groupId>
            <artifactId>jkl-base-swagger2-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.jkinvest.jkl.base</groupId>
            <artifactId>jkl-base-j2cache-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.jkinvest.jkl.base</groupId>
            <artifactId>jkl-base-cloud-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-zuul</artifactId>
            <exclusions>
                <exclusion>
                    <artifactId>guava</artifactId>
                    <groupId>com.google.guava</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.tomcat.embed</groupId>
                    <artifactId>tomcat-embed-websocket</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-undertow</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <filters>
            <filter>../../src/main/filters/config-${profile.active}.properties</filter>
        </filters>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!-- docker打包插件 -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>${dockerfile-maven-plugin.version}</version>
                <configuration>
                    <repository>${docker.image.prefix}/${project.artifactId}</repository>
                    <tag>${zuihou-project.version}</tag>
                    <buildArgs>
                        <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
                    </buildArgs>
                </configuration>
            </plugin>
            
            
            
             <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                <configuration>
                    <!--镜像名称-->                    
                    <imageName>${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}</imageName>
                    <!-- 指定Dockerfile所在的路径 >-->
                    <dockerDirectory>./</dockerDirectory>
                    <!--指定推送的镜像
                    <dockerHost>tcp://192.168.123.202:2375</dockerHost>-->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>

                    <!--推送阿里云相关-->
                    <serverId>docker-aliyun</serverId>
                    <!--表示阿里云的docker仓库地址。阿里云的容器镜像服务地址-->
                    <registryUrl>${docker.repostory}</registryUrl>
                    <!--表示推送镜像到仓库。-->
                    <pushImage>true</pushImage>

                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
